# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = vendor/gtest

# Where to main program code.
MAIN_DIR = main

# Where to find test code
TEST_DIR = test

# Name of target directory
TARGET_DIR_NAME = target

# Target directory where the code will compile to
MAIN_TARGET_DIR = ${MAIN_DIR}/${TARGET_DIR_NAME}
TEST_TARGET_DIR = ${TEST_DIR}/${TARGET_DIR_NAME}

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = sample1_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : target $(TESTS)

clean :
	rm -rf ${MAIN_TARGET_DIR}
	rm -rf ${TEST_TARGET_DIR}

target :
	mkdir -p ${MAIN_TARGET_DIR}
	mkdir -p ${TEST_TARGET_DIR}

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o ${TEST_TARGET_DIR}/$@

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o ${TEST_TARGET_DIR}/$@

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) ${TEST_TARGET_DIR}/$@ ${TEST_TARGET_DIR}/$^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) ${TEST_TARGET_DIR}/gtest_main.a ${TEST_TARGET_DIR}/gtest-all.o ${TEST_TARGET_DIR}/gtest_main.o

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread ${MAIN_TARGET_DIR}/sample1.o ${TEST_TARGET_DIR}/sample1_unittest.o ${TEST_TARGET_DIR}/gtest_main.a -o ${TEST_TARGET_DIR}/$@

sample1.o : $(MAIN_DIR)/sample1.cc $(MAIN_DIR)/sample1.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(MAIN_DIR)/sample1.cc -o ${MAIN_TARGET_DIR}/$@

sample1_unittest.o : $(TEST_DIR)/sample1_unittest.cc \
                     $(MAIN_DIR)/sample1.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/sample1_unittest.cc -o ${TEST_TARGET_DIR}/$@